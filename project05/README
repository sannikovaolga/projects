Проект №5 — Front-end тестирование

Веб-приложения

Несколько раз в этом курсе упоминалось слово "веб-приложение", но чем же веб-приложения отличаются от обычных сайтов? Какие бывают веб-приложения? Давайте разбираться!
Сначала разберёмся в том, что такое сайт. Сайт, или веб-сайт, — это одна или несколько логически связанных между собой веб-страниц. Сайты могут содержать контент разного формата: текст, картинки, музыка и прочее. Зачастую сайты не так связаны с сервером, как веб-приложения, они не предоставляют излишней интерактивности, их задача — выводить блоки текста с различными медиа-файлами.
В свою очередь, веб-приложения — это клиент-серверные приложения, доступ к которым осуществляется при помощи браузера. Они позволяют пользователям вводить, получать и манипулировать данными. Грубо говоря, веб-приложения — это сайт, в который добавили различные кнопки, поля и формы для ввода данных.
Основные отличия веб-сайта от веб-приложения:
- Веб-сайт является просто источником информации, в то время как веб-приложение работает в интерактивном режиме;
- Пользовательский интерфейс веб-приложения намного сложнее, чем интерфейс веб-сайта;
- Веб-приложение может быть составной частью сайта либо отдельным ресурсом;
- Разработка веб-сайта требует гораздо меньше времени, чем разработка веб-приложения.

Клиент-серверное взаимодействие

Вы, пользуясь веб-приложением, постоянно взаимодействуете с сервером. Допустим, регистрация в какой-нибудь социальной сети непременно приведёт к появлению ваших данных на сервере. Так и любое приложение, размещённое в сети Интернет, основывается на связке "клиент-сервер". И это не только электронные формы. Даже простое "перелистывание" страниц некоторого сайта в Интернете — пример клиент-серверного взаимодействия, ведь страницы хранятся не на каждом компьютере, а подгружаются извне.
Что же понимается под "клиентом" и "сервером"? 
Клиент — в нашем случае это компьютер, оснащённый специальным программным обеспечением, которое позволяет пользователю отправить запрос к другой машине и получить ответ. Код, выполняемый на стороне клиента, чаще всего называют клиентским кодом. Он обеспечивает создание пользовательского интерфейса. Здесь, когда речь заходит о браузере, важную роль играет язык программирования JavaScript и библиотеки расширения.
Сервер — это компьютер, который оснащён специальным программным обеспечением, которое позволяет решить задачи предоставления пользователю доступа к некоторым услугам и ресурсам, которыми владеет и управляет данный сервер. Код, выполняемый на стороне сервера, называют серверным кодом или серверным сценарием. Он обеспечивает обработку данных. Здесь важную роль играют серверные языки программирования. Примерами таких языков являются PHP и Python.
Таким образом, базовый концепт заключается в том, что клиент посылает запрос на сервер, а сервер ему отвечает (с запросам и протоколами взаимодействия мы обязательно познакомимся в следующем проекте).

Из преимуществ такого подхода можно отметить:
- Низкие требования к устройствам клиентов
- Гибкая архитектура

Но также существуют и недостатки:
- Высокая стоимость оборудования
- Сложное обслуживание

Обычно все говорят о двух "сторонах" веб-приложения, однако, в алгоритме подобного взаимодействия довольно активно принимает участие еще одна "сторона" — база данных. Вся динамическая информация приложения (учетные, пользовательские данные и пр) хранится именно здесь. Базам данных посвящён целый проект в нашем курсе, потому позже мы их обязательно обсудим!

Front-end и Back-end

Вот мы и дошли до этих терминов. В IT сфере их можно услышать почти везде, где идёт речь о разработке веб-приложений. Так что же мы понимаем под словами Front-end и Back-end? На самом деле, всё очень просто.
Front-end (frontend, фронтенд) — это клиентская часть веб-приложения, пользовательский интерфейс и связанные с ним компоненты. То есть фронтенд — всё, что браузер может читать, выводить на экран и/или запускать.
Back-end (backend, бэкенд) — это внутренняя, скрытая от пользователя часть веб-приложения. То есть бэкенд — всё, что работает на сервере, "не в браузере".

Задание №1. MPA, SPA, PWA

MPA, SPA, PWA... Кажется, мы совсем запутались в этих аббревиатурах... Сможете нам помочь? У нас возникло много-много вопросов .
Создайте файл, в котором:
- расшифруйте три аббревиатуры: MPA, SPA и PWA, дайте этим терминам определения и опишите их различия, недостатки и преимущества;
- приведите по 3 различных примера к каждому термину (с ссылками на реальные приложения);
- ответьте на вопросы:
Зачем вообще нужны PWA? Почему нельзя ограничиться SPA или MPA?
Какие технологии используются для реализации PWA?
Как можно понять (и можно ли), что перед нами PWA, а не другие виды приложений?
Чем отличается между собой тестирование SPA и MPA?
Как тестировать PWA?

Задание №2. Архитектура

Дайте ответы на следующие вопросы:

Какие существуют уровни веб-приложения?
За что отвечает каждый из них?
Что такое монолитная и микросервисная архитектуры веб-приложения?
Каковы различия между монолитом и микросервисами?
Почему не все приложения построены на микросервисной архитектуре?
Каковы особенности тестирования монолитных и микросервисных веб-приложений?

Основные Frontend технологии

Для разработки фронтенд части приложения нужны разнообразные инструменты, которые помогут создать структуру, красиво оформить продукт и сделать его интерактивным. Среди подобных инструментов нужно отметить:
- HTML
- CSS
- JS (JavaScript)

HTML

HTML (HyperText Markup Language) — это язык гипертекстовой разметки текста. HTML-код используется для структурирования и отображения веб-страницы и её контента. Чтобы посмотреть на HTML-код любой страницы в Интернете, просто нажмите на клавишу F12 и перейдёте во вкладку Elements. Также можно разом посмотреть код всей страницы: для этого надо нажать правой кнопкой мыши на пустую область сайта, а после на кнопку "Посмотреть код страницы".
HTML-код состоит из ряда элементов. Когда вы заходите на сайт, браузер подгружает HTML-файл с информацией о структуре и контенте веб-страницы. HTML как бы выстраивает визуальный фундамент сайта, он указывает, где будут располагаться элементы, какой у них будет базовый дизайн, откуда брать стили для элементов и скрипты (обычно их пишут на JavaScript). Элементы же состоят из тегов и контента.
Конечно, тема HTML очень обширная, её попросту нельзя раскрыть за один проект. Существуют целые курсы по изучению HTML и вёрстки сайтов. Поэтому подробно рассматривать данную тему мы не станем, но изучим основные теги на примере построения XPath'ов.

CSS

CSS (Cascading Style Sheets, каскадные таблицы стилей) — это код, который используется для стилизации веб-страницы. Он позволяет "украсить" ваши HTML-элементы, по умолчанию у которых почти никаких стилей нет. CSS позволяет реализовать анимации, переходы, реакции элементов на движение мыши и прочее.

JavaScript

А вот JavaScript — это полноценный язык программирования, который можно встроить в веб-страницу. Этот язык позволяет реализовывать сложные вещи в веб-приложении, например, отображать периодически обновляемый контент, интерактивные графики и так далее.
P.S.: очень советуем изучить вышеперечисленные технологии подробнее, ведь вам ещё не раз придётся с этим столкнуться!

XPath

XPath (XML Path Language) — это язык запросов к элементам XML-документа. Представьте, что в документе Word вы сочетанием клавиш Ctrl + F вызываете функцию поиска контента. Вписывая что-то в поле ввода, вы можете осуществить поиск элементов в вашем документе. То же самое можно делать и в коде HTML, только тут функционал поиска расширяется как раз за счёт XPath'ов, при помощи которых вы можете либо точно указать позицию элемента, либо найти элементы, относящиеся к конкретному классу и многое-многое другое.
Самый простой способ получить XPath — это во вкладке Elements нажать правой кнопкой на элемент и нажать на "Copy full XPath", тем самым скопировав абсолютный XPath. Выглядеть он будет примерно следующим образом: /html/body/div[11]/div/div. Означает это то, что наш элемент (конечный блок div) располагается в другом блоке, который располагается 11-ым по счёту блоком в третьем блоке div, который, в свою очередь, располагается в body, который находится в главном теге html. Но в подобных абсолютных указателях есть два огромных недостатка:
- Это совершенно неудобно читать и не сразу понятно, о каком элементе идёт речь.
- Если HTML-код данной страницы хотя бы немного поменяется, например, добавится новый блок и тем самым сдвинет наш элемент выше или ниже, то такой XPath будет указывать уже на совсем другой элемент.

Для относительного XPath путь начинается с середины структуры HTML DOM. Он начинается с двойной косой черты (//), что означает, что он может искать элемент в любом месте на веб-странице. Далее используется имя тега нужного нам узла, указывается атрибут узла и значение этого атрибута: //tagname[@Attribute='value']. Например, представим, что мы пишем XPath до поля ввода Email адреса в простом веб-приложении, тогда он может быть написан двумя способами:

/html/body/div/div/form/table/tbody/tr/td/input
//input[@id='email']

Второй XPath выглядит гораздо лучше первого, не так ли?

Задание №3. XML, HTML и XPath

Добавьте ответы на вопросы:

Что такое язык разметки?
Какие вы знаете языки разметки? Опишите каждый из них.
Что такое XML?
Что такое теги, атрибуты и элементы в XML?
Чем XML отличается от HTML?
Что такое DTD? Расшифруйте и приведите примеры использования в различных документах.
Из чего состоит HTML-документ?

А теперь перейдите на сайт СберСтрахования. Ознакомьтесь с основным функционалом приложения. Создайте файл exercise3.2.md, в котором опишите XPath'ы на первой странице ("1. Оформление") для:

Каждой кнопки;
Каждого поля для ввода текста;
Каждого чекбокса;
Каждого датапикера;
Логотипа "СБЕР СТРАХОВАНИЕ";
Слайдера в блоке выбора срока страхования;
Хедера "Данные страхователя";
Текстовых блоков: "Укажите дату начала действия полиса и срока страхования", "Является законсервированным, под реконструкцией, незавершенным строительством";

P.S.: XPath'ы нужно писать для каждого элемента отдельно
Далее при помощи вкладки Elements отредактируйте какой-либо атрибут трех любых элементов на странице (шрифт, цвет, расположение, прочее — на усмотрение команды). Сделайте скрины этих элементов до и после редактирования, присвойте им названия: 1-before.png — до, 1-after.png — после (в итоге получится 6 скринов).

UX/UI

Работая с фронтенд-составляющей приложения, можно часто встретиться с такими аббревиатурами, как UX и UI. Есть даже UI и UX виды тестирования.
Аббревиатура UI расшифровывается как user interface — это оформление сайта: сочетания цветов, шрифты, иконки и кнопки.
UX — user experience, то есть "пользовательский опыт". Простыми словами, это то, каким образом пользователь взаимодействует с интерфейсом и насколько приложение для него удобно.
Если функциональное тестирование — это тестирование ПО для проверки реализуемости функциональных требований, то UI-тестирование — это тестирование ПО с целью проверки всех визуальных индикаторов и иконок, меню, переключателей, текстовых полей, флажков и так далее.
UX-тестирование (юзабилити-тестирование) отличается от других видов тестирования, которые мы рассматривали ранее, тем, что оно подразумевает проведение проверки на реальных пользователях. Потому проводить UX-тестирование в данном проекте мы не будем, но от UI-тестирования не откажемся!

Задание №4. UI-тестирование

Ознакомьтесь с технологией проведения UI-тестирования. В TestIT создайте общее рабочее пространство, в нём создайте проект и назовите его "СберСтрахование". Добавьте тест-кейсы, которые позволяют провести полное ручное UI-тестирование одной из страниц СберСтрахования: "1. Оформление".
После выполнения задания выгрузите полученные тест-кейсы в формате xlsx, назовите файл exercise4.1.xlsx и загрузите его в папку /src.
Добавьте в созданное рабочее пространство новый проект. Теперь вам необходимо создать тест-кейсы, которые позволят провести полное ручное UI-тестирование официального сайта TestIT (проверять нужно только главную страницу и два первых раздела: "О продукте" и "Цена", включая подразделы, но не затрагивая поддомены и другие сайты). Файл с выгруженными тест-кейсами назовите exercise4.2.xlsx и загрузите его во всю ту же папку /src!
