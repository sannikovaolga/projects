Проект №10 — Базы данных.

Базы данных

Тестирование любого приложения включает в себя проверку работы системы на различных входных данных, получая их из разных хранилищ (из разных баз данных). В этом разделе мы и изучим, что такое база данных, и поймём схему работы с ней.
Начнём с вводного определения. База данных — это набор структурированной информации, которая хранится в электронном виде. Другими словами, база данных является местом, в котором приложение хранит свои данные. Корзина в интернет-магазине, списки услуг на различных сервисах, ваши личные данные аккаунтов из социальных сетей — всё это хранится в базах данных.
Всем ли приложениям обязательно иметь свою базу данных? Совсем нет. Например, если это сайт-лендинг, который лишь предоставляет информацию, или если это игровое приложение, где не требуется хранение результата вашей игры, то база данных тут не потребуется. Однако отсутствие базы данных зачастую говорит о том, что приложение не является масштабным, и тестирование такого приложения не требует большого количества усилий. В таком случае приложение хранит данные в памяти компьютера, телефона и иных технических средствах, что при большом объёме данных может замедлять работу приложения.
Как мы выяснили, память технического устройства — не лучшее место для хранения. Поэтому когда данных много, их нужно куда-то сложить. Можно писать в файлы, а можно сохранять информацию в базу данных (далее часто будем пользоваться аббревиатурой — БД).

Задание №1. Типы баз данных

Типов баз данных достаточно большое количество, и для их тестирования приложений стоит понимать основные особенности каждой из них. Опишите следующие виды баз данных:

Простейшие базы данных:
- иерархические;
- сетевые.

Реляционные базы данных

Нереляционные базы данных:
- на основе пар "ключ‑значение";
- документная;
- графовая;
- колоночная;
- временных рядов.

NewSQL базы данных

Многомодельные базы данных

Каждому типу дайте определение, укажите их особенности (преимущества и недостатки). К каждому типу приведите по 2-3 примера баз данных.

Основы работы с СУБД

При проектировании современных высоконагруженных систем зачастую говорят не о БД, а о системе управления базами данных (СУБД). СУБД – это программные средства, которые позволяют создавать структуру новой базы данных, наполнять её содержимым, редактировать и обрабатывать информацию внутри БД. СУБД предназначена для централизованного управления базой данных.
По степени универсальности различают два класса СУБД:
- системы общего назначения
- специализированные системы

Чтобы оценить производительность СУБД достаточно проверить:
- время выполнения запросов;
- скорость поиска информации в неиндексированных полях;
- время выполнения операций импортирования базы данных из других форматов;
- скорость создания индексов и выполнения таких массовых операций, как вставка, удаление данных;
- максимальное число параллельных обращений к данным в многопользовательском режиме.

Некоторые СУБД предусматривают средства обеспечения безопасности данных, которые позволяют:
- шифровать данные;
- защищать данные паролем;
- ограничить уровень доступа (к базе данных, к таблице, к словарю).

Веб-хранилища

Как мы уже говорили ранее, у приложений есть возможность хранить данные в памяти, в случае веб-приложений – это браузер, а конкретнее – веб-хранилища браузера (web-storage). В них легче хранить второстепенную информацию, например, пользовательские настройки (скажем, параметры, которые определяют способ отображения веб-страницы) и состояние приложения (снимок текущего состояния веб-приложения), чтобы посетитель мог продолжить его выполнение с того же самого места позже. Эта информация может быть кратковременной, которая удаляется после выключения браузера, или долговременной, которая остается доступной при последующих посещениях веб-страницы.
Сохраняемая в веб-хранилище информация в действительности сохраняется не в интернете, а на компьютере посетителя веб-страницы. Иными словами, веб-хранилище означает хранение данных не в интернете, а хранение данных из интернета.

Задание №2. Веб-хранилища №1

Что такое Local Storage и Session Storage? В чём заключается их различие?
Какие существуют основные методы взаимодействия с localStorage и sessionStorage через консоль в браузере? Как производить сохранение, получение, удаление данных, очистку хранилища?
Что такое IndexedDB? Чем этот вид хранилища отличается от описанных выше?
Как можно просмотреть содержимое всех веб-хранилищ в браузере?

Задание №3. Веб-хранилища №2

Изучите различные веб-приложения и сайты на предмет того, какие пользовательские данные они хранят в "Local Storage", "Session Storage" и "IndexedDB". Подбор веб-приложений производите на своё усмотрение, это могут быть социальные сети, интернет-магазины, различные сервисы и т.п. Опишите в нём по 5-7 объектов из "Local Storage" и "Session Storage" в виде таблицы: Ключ / Значение / Краткое описание того, как вы понимаете, с какой целью нужно хранить данный объект. Некоторые объекты могут содержать личные данные, поэтому при выполнении этого задания лучше их лишний раз не распространять .
Когда вы опишете объекты веб-хранилища, попробуйте сами создать парочку! С помощью метода setItem(key, value) нужно добавить в sessionStorage и в localStorage по одному объекту. Для этого в DevTools необходимо открыть вкладку "Console", после чего ввести соответствующую команду. Необходимо будет прикрепить 4 скриншота (не забудь добавить их в src!):

Результата выполнения команд для добавления и получения объекта в "Session Storage"
Состояния "Session Storage" после добавления объекта
Результата выполнения команд для добавления и получения объекта в "Local Storage"
Состояния "Local Storage" после добавления объекта

Задание №4. Свойства веб-хранилищ

Аналогично второй части предыдущего задания, давайте создадим по одному объекту в "Local Storage" и "Session Storage". Только теперь вам предстоит исследовать их при различных действиях с браузером, а именно проверить, сохраняются ли объекты при:
- обновлении страницы
- дублировании вкладки браузера
- восстановлении страницы (это можно сделать сочетанием клавиш "Ctrl + Shift + T")
- закрытии и открытии браузера (перезапуска браузера)

Сопоставьте полученные результаты и представьте их в виде таблицы "Local Storage" / "Session Storage", где в каждой ячейке укажите "+" или "-" в соответствии с тем, сохраняется ли объект при определённом действии.

SQL

Стандартным языком реляционных СУБД является язык SQL (Structured Query Language) – это структурированный язык запросов, применяемый для создания, модификации и управления данными. Язык SQL позволяет находить среди большого объёма данных те записи, которые нужны для конкретных целей, сортировать и структурировать их.
Общение пользователя с базой данных не осуществляет напрямую и выглядит примерно так:

Пользователь в клиентской части приложения, которая используется для создания запроса, вводит определённые данные (например, в поисковую строку вводит какой-то текст).
Формируется запрос и передаётся на серверную часть приложение через API.
При помощи СУБД создаётся запрос к базе данных с определёнными фильтрами (это делают с помощью специальных команд — операторов).
После получения ответа от БД, на серверной части формируется ответ на пользовательский запрос и далее вы уже всё знаете!

Задание №5. Язык SQL

Что такое операторы в SQL?
Каких типов бывают операторы SQL, для чего каждый из них используются?
Часто ли применяется SQL? Приведите 3 примера реальных приложений, в которых используется SQL (укажите для чего именно).

SQL-запросы

Общая структура sql-запросов выглядит следующим образом:

SELECT (указываются столбцы) | обязательно
FROM (указывается таблица) | обязательно
WHERE (указывается условие для отбора данных) | необязательно
GROUP BY (указывается столбец для группировки данных) | необязательно
HAVING (указывается условие для фильтрации на уровне сгруппированных данных) | необязательно
ORDER BY (столбец, по которому необходими отсортировать вывод) | необязательно

Например, запрос:

SELECT * FROM Customers
ORDER BY Country, City;

Вернёт все записи из таблицы Customers, отсортируя их сначала по стране (по столбцу стран), затем по городу (по столбцу городов)
Пример запроса, содержащего WHERE и HAVING:

SELECT City, count(CustomerID) AS number_of_clients FROM Customers
WHERE CustomerName NOT IN ('Around the Horn','Drachenblut Delikatessend')
GROUP BY City
HAVING number_of_clients >= 5

В данном запросе берутся города и число клиентов (в качестве переменной number_of_clients) из таблицы Customers. Затем исходная таблица фильтруется по именам клиентов (отсеиваются записи, не подходящие под указанные условия), полученные данные группируются по городам, а затем остаются только те записи, количество клиентов в которых не менее 5.

Задание №6. Создание SQL-запросов

Ну что, пришло время самим попробовать написать несколько запросов к базам данных! Для этого перейдите на сайт, который был создан как раз для обучения SQL-запросам. Создайте файл, в который прикрепите скриншоты таблиц, которые выдаёт сервис после совершения запросов к базам данных. Причём на каждую таблицу (они расположены в правой части сайта) необходимо будет сделать по три запроса, один из которых должен быть сложным (содержать по 4-5 операторов запроса). К каждому скриншоту сделайте краткое описание получаемых данных.

Тестирование базы данных

Тестирование базы данных – это выполнение проверки достоверности данных, проверка целостности данных, проверка производительности, связанная с базой данных, и тестирование процедур (различных запросов к базе данных) и функций в базе данных. Тестирование базы данных может включать в себя проверки: схем, таблицы базы данных, столбцов, ключей и индексов, хранимых процедур, триггеров (процедур, выполняющихся автоматически при определённом заданном событии на сервере), сервера базы данных, дублирования данных.

Классификация
В зависимости от функции и структуры базы данных тестирование БД можно разделить на три категории:
- Функциональное тестирование − проверка функциональности базы данных (отвечает на вопрос "соответствуют ли требуемые операции, выполняемые конечными пользователями, бизнес-спецификациям").
- Структурное тестирование базы данных − это процесс проверки структуры базы данных на точность и полноту. Примером такого вида тестирования является тестирование схемы − проверка типов данных столбцов, взаимосвязей между таблицами и так далее.
- Нефункциональное тестирование − включает в себя выполнение нагрузочного тестирования, стресс-тестирование, проверку минимальных системных требований на соответствие бизнес-спецификациям, выявление рисков и оптимизацию производительности базы данных

Задание №7. Нагрузка, стресс и отказоустойчивость

Что такое нагрузочное тестирование, тестирование отказоустойчивости и стресс-тестирование? Что их отличает друг от друга?
Приведите по одному примеру выполнения каждого из трёх видов тестирования (в контексте проверки базы данных большого веб-приложения).
С помощью каких инструментов можно провести нагрузочное тестирование базы данных?
Какие существуют способы оптимизации (улучшения производительности) базы данных?
